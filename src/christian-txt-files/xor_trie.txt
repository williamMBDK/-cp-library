template<int SIZE>
class XORTrie {
public:
    class Node {
    public:
        Node* one;
        Node* zero;
        int cnt;
        int depth;
        Node(int cnt, int depth):
            one(nullptr), zero(nullptr), cnt(cnt), depth(depth) {}
        ~Node() {
            if (one != nullptr) {
                delete one;
            }
            if (zero != nullptr) {
                delete zero;
            }
        }
    };
    int n;
    Node* root;
    XORTrie() {}
    ~XORTrie() {
        if (root != nullptr) {
            delete root;
        }
    }
    void init() {
        n = 0;
        root = new Node(0, SIZE);
    }
    bool exist(Node* node, i64 x) {
        int d = node->depth;
        if (d == -1) {
            return true;
        }
        if (x>>d&1) {
            if (node->one != nullptr) {
                return exist(node->one, x);
            }
        } else {
            if (node->zero != nullptr) {
                return exist(node->zero, x);
            }
        }
        return false;
    }
    bool exist(i64 x) { return exist(root, x); }
    void insert(Node* node, i64 x) {
        int d = node->depth;
        if (d != root->depth) {
            node->cnt++;
        }
        if (d == -1) {
            return;
        }
        if (x>>d&1) {
            if (node->one == nullptr) {
                node->one = new Node(0, d-1);
            }
            insert(node->one, x);
        } else {
            if (node->zero == nullptr) {
                node->zero = new Node(0, d-1);
            }
            insert(node->zero, x);
        }
    }
    void insert(i64 x) { insert(root, x), n++; }
    void erase(Node* node, i64 x) {
        int d = node->depth;
        if (d != root->depth) {
            node->cnt--;
        }
        if (d == -1) {
            return;
        }
        if (x>>d&1) {
            if (node->one == nullptr) {
                node->one = new Node(0, d-1);
            }
            erase(node->one, x);
        } else {
            if (node->zero == nullptr) {
                node->zero = new Node(0, -1);
            }
            erase(node->zero, x);
        }
    }
    void erase(i64 x) { erase(root, x), n--; }
    int qry(Node* node, i64 a, i64 b) {
        int d = node->depth;
        if (d == -1) {
            return 0;
        }
        int cnt = 0;
        if (((a>>d&1) && (b>>d&1))) {
            if (node->one != nullptr) {
                cnt += node->one->cnt;
            }
        }
        if ((!(a>>d&1) && (b>>d&1))) {
            if (node->zero != nullptr) {
                cnt += node->zero->cnt;
            }
        }
        if (((a>>d&1) && (b>>d&1)) || (!(a>>d&1) && !(b>>d&1))) {
            if (node->zero != nullptr) {
                cnt += qry(node->zero, a, b);
            }
        } else if ((!(a>>d&1) && (b>>d&1)) || ((a>>d&1) && !(b>>d&1))) {
            if (node->one != nullptr) {
                cnt += qry(node->one, a, b);
            }
        }
        return cnt;
    }
    int qry(i64 a, i64 b) {
        /* count x, where x ^ a < b */
        return qry(root, a, b);
    }
};
typedef XORTrie<30> trie; // <- able to store values <= 2^30