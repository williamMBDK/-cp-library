#define Matrix vector<vector<i64>>
const i64 m = 1000000007;
Matrix operator*(const Matrix& a, const Matrix& b) {
    Matrix c = Matrix(len(a), vector<i64>(len(b[0])));
    for (int i = 0; i < len(a); i++) {
        for (int j = 0; j < len(b[0]); j++) {
            for (int k = 0; k < len(b); k++) {
                c[i][j] += a[i][k]*b[k][j]%m;
                c[i][j] %= m;
            }
        }
    }
    return c;
}
Matrix fast_exp(const Matrix& a, i64 b, map<i64, Matrix>& dp) {
    if (dp.count(b)) return dp[b];
    if (b == 1) return a;
    if (b%2) return dp[b] = fast_exp(a, b/2, dp)*fast_exp(a, b/2, dp)*a;
    return dp[b] = fast_exp(a, b/2, dp)*fast_exp(a, b/2, dp);
}
Matrix operator^(const Matrix& a, i64 b) {
    map<i64, Matrix> dp;
    return fast_exp(a, b, dp);
}
void linear_recurrence() {
    /*
        f(n) = c1*f(n-1)+c2*f(n-2)+c3*f(n-3)+c4*f(n-4)+c5*f(n-5)+c6*f(n-6)
    
        |  0  1  0  0  0  0 |^n    |f(0)|   | f(n) |
        |  0  0  1  0  0  0 |      |f(1)|   |f(n+1)|
        |  0  0  0  1  0  0 |      |f(2)|   |f(n+2)|
        |  0  0  0  0  1  0 |   x  |f(3)| = |f(n+3)|
        |  0  0  0  0  0  1 |      |f(4)|   |f(n+4)|
        | c6 c5 c4 c3 c2 c1 |      |f(5)|   |f(n+5)|
        
        dp[j] += dp[i] * X[i][j] <-- genral case
    */
    /*
        below is a solution to: https://cses.fi/problemset/task/1096/
    */
    Matrix X = {
        {0, 1, 0, 0, 0, 0}, 
        {0, 0, 1, 0, 0, 0}, 
        {0, 0, 0, 1, 0, 0}, 
        {0, 0, 0, 0, 1, 0}, 
        {0, 0, 0, 0, 0, 1}, 
        {1, 1, 1, 1, 1, 1}
    };
    Matrix f = {
        {1}, 
        {2}, 
        {4}, 
        {8}, 
        {16}, 
        {32}
    };
    i64 n; cin >> n;
    if (n <= 2) {
        print(n);
        return;
    }
    Matrix A = (X^(n-1))*f;
    print(A[0][0]);
}