#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<class T> using OST = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
class MergeSortTree {
    int n;
    int N;
    vector<OST<pair<i64, int>>> tree;
    i64 recursive_qry(int a, int b, int k, int x, int y, i64 u) {
        if (y < a || b < x) return 0;
        if (x >= a && b >= y) return tree[k].order_of_key({u, -1});
        int d = x+(y-x)/2;
        return recursive_qry(a, b, k*2, x, d, u)+recursive_qry(a, b, k*2+1, d+1, y, u);
    }
public:
    MergeSortTree() {}
    MergeSortTree(int n, vector<i64>& A) {
        this->n = n;
        N = nextpow2(n);
        tree.resize(2*N);
        for (int i = 0; i < n; i++) tree[i+N].insert({0, i});
        for (int i = 0; i < n; i++) set(i, A[i]);
    }
    i64 qry(int a, int b, i64 u) {
        /* counts how many elements are less than u */
        return recursive_qry(a, b, 1, 0, N-1, u);
    }
    void set(int k, i64 u) {
        k += N;
        pair<i64, int> x = *tree[k].begin();
        tree[k].erase(x);
        tree[k].insert({u, x.second});
        for (k /= 2; k >= 1; k /= 2) {
            tree[k].erase(x);
            tree[k].insert({u, x.second});
        }
    }
};